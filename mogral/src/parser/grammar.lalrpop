use std::str::FromStr;
use crate::ast;
use crate::pos::{Span, Spanned};
use crate::op::{BinOp, LazyBinOp, UnOp};
use crate::types::MglType;

grammar;

pub Module:                                 ast::Module = {
    Sp<Func>*                                   => ast::Module { funcs: <> },
};

// Function

Func:                                       ast::Func = {
    "extern" <FuncDecl> ";"                     => ast::Func::Extern(<>),
    FuncDef                                     => ast::Func::FuncDef(<>),
};
FuncDecl:                                   ast::FuncDecl = {
    "fn" <n:Sp<Ident>> "(" <p:Params> ")"
        <r:FuncRetType?>                        => ast::FuncDecl { name: n, params: p, ret: r },
};
FuncRetType:                                Spanned<MglType> = {
    ":" <Sp<Type>>
};

Params = Comma<Sp<TypedIdent>>;
FuncDef:                                    ast::FuncDef = {
    <d:Sp<FuncDecl>> <b:Sp<Block>>              => ast::FuncDef { decl: d, body: b },
};

// Statements

Stmt:                                       ast::Stmt = {
    <Sp<Let>> ";"                               => ast::Stmt::Let(<>),
    <Sp<Expr>> ";"                              => ast::Stmt::Expr(<>),
};

Let:                                        ast::Let = {
    <n:Sp<Ident>> <t:TypeAnnot?> "="
        <v:Sp<Expr>>                            => ast::Let { name: n, type_: t, val: Some(v) },
    <n:Sp<Ident>> <t:TypeAnnot>                 => ast::Let { name: n, type_: Some(t), val: None },
}

// Expressions

Expr:                                       Box<ast::Expr> = {
    Set                                         => Box::new(ast::Expr::Set(<>)),
    Return                                      => Box::new(ast::Expr::Return(<>)),
    BinOpExpr,
    ExprWithBlock,
};

Set:                                        ast::Set = {
    "set" <i:Sp<Expr>> "=" <e:Sp<Expr>>         => ast::Set { var: i, val: e },
};

Return:                                     Box<ast::Expr> = {
    "return" <Expr>,
};

BinOpExpr = LazyTier<LogOrOp, LogAndExpr>;
LogAndExpr = LazyTier<LogAndOp, CompExpr>;
CompExpr = Tier<CompOp, AddExpr>;
AddExpr = Tier<AddOp, MulExpr>;
MulExpr = Tier<MulOp, UnOpExpr>;

UnOpExpr:                                   Box<ast::Expr> = {
    <o:Sp<UnOp>> <e:Sp<UnOpExpr>>               => Box::new(ast::Expr::UnOp(ast::UnOpExpr { op: o, opnd: e })),
    Index,
};

Index:                                      Box<ast::Expr> = {
    <t:Sp<Index>> "[" <i:Sp<Expr>> "]"          => Box::new(ast::Expr::Index(ast::Index { target: t, index: i })),
    Primary,
};

Primary:                                    Box<ast::Expr> = {
    Literal                                     => Box::new(ast::Expr::Literal(<>)),
    Ident                                       => Box::new(ast::Expr::Ident(<>)),
    FuncCall                                    => Box::new(ast::Expr::FuncCall(<>)),
    "(" <Expr> ")",
};

FuncCall:                                   ast::FuncCall = {
    <i:Sp<Ident>> "(" <a:ArgList> ")"           => ast::FuncCall { func_name: i, args: a },
};
ArgList = Comma<Sp<Expr>>;

ExprWithBlock:                              Box<ast::Expr> = {
    Block                                       => Box::new(ast::Expr::Block(<>)),
    If                                          => Box::new(ast::Expr::If(<>)),
    For                                         => Box::new(ast::Expr::For(<>)),
};

Block:                                      ast::Block = {
    "{" <mut v:Sp<StmtsInBlock>*> <s:Sp<Stmt>>
        "}"                                     => { v.push(s); ast::Block { stmts: v, expr: None } },
    "{" <v:Sp<StmtsInBlock>*> <e:Sp<Expr>> "}"  => ast::Block { stmts: v, expr: Some(e) },
    "{" "}"                                     => ast::Block { stmts: Vec::new(), expr: None },
};
StmtsInBlock:                               ast::Stmt = {
    Stmt,
    Sp<ExprWithBlock>                           => ast::Stmt::Expr(<>)
};

If:                                         ast::If = {
    "if" <c:Sp<Expr>> <t:Sp<Block>>
        <e:Else?>                               => ast::If { cond: c, then: t, else_: e },
};
Else:                                       Spanned<ast::Block> = {
    "else" <Sp<Block>>,
};

For:                                        ast::For = {
    "for" <v:Sp<Ident>> "," <u:Sp<Expr>>
        <b:Sp<Block>>                           => ast::For { var_name: v, until: u, body: b },
};

TypedIdent:                                 ast::TypedIdent = {
    <i:Sp<Ident>> <t:TypeAnnot>                 => ast::TypedIdent { ident: i, type_: t },
}

TypeAnnot:                                  Spanned<MglType> = {
    ":" <Sp<Type>>
}

CompOp:                                     BinOp = {
    "<"                                         => BinOp::Lt,
    ">"                                         => BinOp::Gt,
    "<="                                        => BinOp::Leq,
    ">="                                        => BinOp::Geq,
    "=="                                        => BinOp::Eq,
    "!="                                        => BinOp::Neq,
};
AddOp:                                      BinOp = {
    "+"                                         => BinOp::Add,
    "-"                                         => BinOp::Sub,
};
MulOp:                                      BinOp = {
    "*"                                         => BinOp::Mul,
    "/"                                         => BinOp::Div,
    "%"                                         => BinOp::Rem,
};

LogAndOp:                                   LazyBinOp = {
    "&&"                                        => LazyBinOp::And
}; 
LogOrOp:                                    LazyBinOp = {
    "||"                                        => LazyBinOp::Or
};

UnOp:                                       UnOp = {
    "-"                                         => UnOp::Neg,
    "!"                                         => UnOp::Not,
}

Ident:                                      String = {
    r"[A-Za-z_][A-Za-z_0-9]*"                   => <>.to_string()
};

Literal:                                    ast::Literal = {
    Unit                                        => ast::Literal::Unit(<>),
    Int                                         => ast::Literal::Int(<> as i32),
    Float                                       => ast::Literal::Float(<>),
    Bool                                        => ast::Literal::Bool(<>),
};

Unit:                                       () = {
    "(" ")"                                     => (),
}

Int:                                        u64 = {
    r"0|[1-9][0-9]*"                            => u64::from_str(<>).unwrap(),
}
Float:                                      f64 = {
    r"(0?|[1-9][0-9]*)\.[0-9]+"                 => f64::from_str(<>).unwrap(),
    r"(0|[1-9][0-9]*)\."                        => f64::from_str(<>).unwrap(),
}

Bool:                                       bool = {
    "true"                                      => true,
    "false"                                     => false,
}

Type:                                       MglType = {
    "(" ")"                                     => MglType::Unit,
    "int"                                       => MglType::Int,
    "double"                                    => MglType::Double,
    "bool"                                      => MglType::Bool,
    "[" <t:Type> ";" <s:Int> "]"                => MglType::Array { type_: Box::new(t), size: s as usize },
}

Comma<T>:                                   Vec<T> = {
    <mut v:(<T> ",")*> <e:T?>                   => match e {
                                                    None => v,
                                                    Some(e) => {
                                                        v.push(e);
                                                        v
                                                    }
                                                }
};

Tier<BinOp, NextTier>:                      Box<ast::Expr> = {
    <l:Sp<Tier<BinOp, NextTier>>>
        <o:Sp<BinOp>> <r:Sp<NextTier>>          => Box::new(ast::Expr::BinOp(ast::BinOpExpr { lhs: l, op: o, rhs: r })),
    NextTier
};

LazyTier<BinOp, NextTier>:                  Box<ast::Expr> = {
    <l:Sp<LazyTier<BinOp, NextTier>>>
        <o:Sp<BinOp>> <r:Sp<NextTier>>          => Box::new(ast::Expr::LazyBinOp(ast::LazyBinOpExpr { lhs: l, op: o, rhs: r })),
    NextTier
};

#[inline]
Sp<Rule>:                                   Spanned<Rule> = {
    <l:@L> <i:Rule> <r:@R>                      => Spanned { item: i, span: Span { l, r } }
};
